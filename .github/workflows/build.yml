name: Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  TZ: UTC
  LANG: C.UTF-8

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            preset: linux-gcc-release
            compiler: gcc
            build_type: Release
          - os: ubuntu-latest
            preset: linux-clang-release
            compiler: clang
            build_type: Release
          # macOS builds
          - os: macos-latest
            preset: macos-clang-release
            compiler: clang
            build_type: Release
          # Windows builds
          - os: windows-latest
            preset: windows-msvc-release
            compiler: msvc
            build_type: Release

    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install CMake (Linux)
      if: runner.os == 'Linux'
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y wget
        wget https://github.com/Kitware/CMake/releases/download/v3.24.0/cmake-3.24.0-linux-x86_64.sh
        sudo mkdir -p /opt/cmake
        sudo sh cmake-3.24.0-linux-x86_64.sh --prefix=/opt/cmake --skip-license
        echo "/opt/cmake/bin" >> $GITHUB_PATH

    - name: Install CMake (macOS)
      if: runner.os == 'macOS'
      shell: bash
      run: brew install cmake

    - name: Install CMake (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: choco install cmake --version=3.24.0 -y

    - name: Install Ninja (Linux)
      if: runner.os == 'Linux'
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y ninja-build

    - name: Install Ninja (macOS)
      if: runner.os == 'macOS'
      shell: bash
      run: brew install ninja

    - name: Setup GCC (Linux)
      if: matrix.os == 'ubuntu-latest' && matrix.compiler == 'gcc'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-10 g++-10
        echo "CC=gcc-10" >> $GITHUB_ENV
        echo "CXX=g++-10" >> $GITHUB_ENV

    - name: Setup Clang (Linux)
      if: matrix.os == 'ubuntu-latest' && matrix.compiler == 'clang'
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-14
        echo "CC=clang-14" >> $GITHUB_ENV
        echo "CXX=clang++-14" >> $GITHUB_ENV

    - name: Set up MSVC (Windows)
      if: matrix.os == 'windows-latest'
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64
        vsversion: "2022"

    - name: Cache build directory
      uses: actions/cache@v3
      with:
        path: build
        key: ${{ runner.os }}-${{ matrix.compiler }}-${{ matrix.build_type }}-${{ hashFiles('CMakeLists.txt', 'CMakePresets.json') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.compiler }}-${{ matrix.build_type }}-

    - name: Configure CMake
      run: cmake --preset ${{ matrix.preset }}

    - name: Build
      run: cmake --build --preset ${{ matrix.preset }}

    - name: Test
      run: ctest --preset ${{ matrix.preset }}

    - name: Run main executable test (if exists)
      shell: bash
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          if [ -f "./build/Release/nova_genesis_orbitalguard_test.exe" ]; then
            ./build/Release/nova_genesis_orbitalguard_test.exe
          else
            echo "Main test executable not found, skipping..."
          fi
        else
          if [ -f "./build/nova_genesis_orbitalguard_test" ]; then
            ./build/nova_genesis_orbitalguard_test
          else
            echo "Main test executable not found, skipping..."
          fi
        fi

    - name: List build artifacts
      if: always()
      shell: bash
      run: |
        echo "Build directory contents:"
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          if [ -d "./build/Release" ]; then
            ls -la build/Release/ || echo "Release directory is empty or inaccessible"
          else
            echo "Release directory not found"
          fi
        else
          if [ -d "./build" ]; then
            ls -la build/ || echo "Build directory is empty or inaccessible"
          else
            echo "Build directory not found"
          fi
        fi
